/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.apiserver.objects;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class WagerResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5818487688221156897L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WagerResponse\",\"namespace\":\"com.example.apiserver.objects\",\"fields\":[{\"name\":\"jackpotPoolId\",\"type\":\"string\",\"doc\":\"The ID of a specific Jackpot pool\"},{\"name\":\"wager\",\"type\":\"int\",\"doc\":\"The wager placed to the Jackpot pool\"},{\"name\":\"status\",\"type\":\"string\",\"doc\":\"The status returned for the request, i.e. success or failure\"},{\"name\":\"result\",\"type\":\"string\",\"doc\":\"The result of placing the wager, i.e. win or lose\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WagerResponse> ENCODER =
      new BinaryMessageEncoder<WagerResponse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WagerResponse> DECODER =
      new BinaryMessageDecoder<WagerResponse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WagerResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WagerResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WagerResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WagerResponse>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WagerResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WagerResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WagerResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WagerResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The ID of a specific Jackpot pool */
  private java.lang.CharSequence jackpotPoolId;
  /** The wager placed to the Jackpot pool */
  private int wager;
  /** The status returned for the request, i.e. success or failure */
  private java.lang.CharSequence status;
  /** The result of placing the wager, i.e. win or lose */
  private java.lang.CharSequence result;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WagerResponse() {}

  /**
   * All-args constructor.
   * @param jackpotPoolId The ID of a specific Jackpot pool
   * @param wager The wager placed to the Jackpot pool
   * @param status The status returned for the request, i.e. success or failure
   * @param result The result of placing the wager, i.e. win or lose
   */
  public WagerResponse(java.lang.CharSequence jackpotPoolId, java.lang.Integer wager, java.lang.CharSequence status, java.lang.CharSequence result) {
    this.jackpotPoolId = jackpotPoolId;
    this.wager = wager;
    this.status = status;
    this.result = result;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return jackpotPoolId;
    case 1: return wager;
    case 2: return status;
    case 3: return result;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: jackpotPoolId = (java.lang.CharSequence)value$; break;
    case 1: wager = (java.lang.Integer)value$; break;
    case 2: status = (java.lang.CharSequence)value$; break;
    case 3: result = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'jackpotPoolId' field.
   * @return The ID of a specific Jackpot pool
   */
  public java.lang.CharSequence getJackpotPoolId() {
    return jackpotPoolId;
  }


  /**
   * Sets the value of the 'jackpotPoolId' field.
   * The ID of a specific Jackpot pool
   * @param value the value to set.
   */
  public void setJackpotPoolId(java.lang.CharSequence value) {
    this.jackpotPoolId = value;
  }

  /**
   * Gets the value of the 'wager' field.
   * @return The wager placed to the Jackpot pool
   */
  public int getWager() {
    return wager;
  }


  /**
   * Sets the value of the 'wager' field.
   * The wager placed to the Jackpot pool
   * @param value the value to set.
   */
  public void setWager(int value) {
    this.wager = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The status returned for the request, i.e. success or failure
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * The status returned for the request, i.e. success or failure
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'result' field.
   * @return The result of placing the wager, i.e. win or lose
   */
  public java.lang.CharSequence getResult() {
    return result;
  }


  /**
   * Sets the value of the 'result' field.
   * The result of placing the wager, i.e. win or lose
   * @param value the value to set.
   */
  public void setResult(java.lang.CharSequence value) {
    this.result = value;
  }

  /**
   * Creates a new WagerResponse RecordBuilder.
   * @return A new WagerResponse RecordBuilder
   */
  public static com.example.apiserver.objects.WagerResponse.Builder newBuilder() {
    return new com.example.apiserver.objects.WagerResponse.Builder();
  }

  /**
   * Creates a new WagerResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WagerResponse RecordBuilder
   */
  public static com.example.apiserver.objects.WagerResponse.Builder newBuilder(com.example.apiserver.objects.WagerResponse.Builder other) {
    if (other == null) {
      return new com.example.apiserver.objects.WagerResponse.Builder();
    } else {
      return new com.example.apiserver.objects.WagerResponse.Builder(other);
    }
  }

  /**
   * Creates a new WagerResponse RecordBuilder by copying an existing WagerResponse instance.
   * @param other The existing instance to copy.
   * @return A new WagerResponse RecordBuilder
   */
  public static com.example.apiserver.objects.WagerResponse.Builder newBuilder(com.example.apiserver.objects.WagerResponse other) {
    if (other == null) {
      return new com.example.apiserver.objects.WagerResponse.Builder();
    } else {
      return new com.example.apiserver.objects.WagerResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for WagerResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WagerResponse>
    implements org.apache.avro.data.RecordBuilder<WagerResponse> {

    /** The ID of a specific Jackpot pool */
    private java.lang.CharSequence jackpotPoolId;
    /** The wager placed to the Jackpot pool */
    private int wager;
    /** The status returned for the request, i.e. success or failure */
    private java.lang.CharSequence status;
    /** The result of placing the wager, i.e. win or lose */
    private java.lang.CharSequence result;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.apiserver.objects.WagerResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.jackpotPoolId)) {
        this.jackpotPoolId = data().deepCopy(fields()[0].schema(), other.jackpotPoolId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.wager)) {
        this.wager = data().deepCopy(fields()[1].schema(), other.wager);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.result)) {
        this.result = data().deepCopy(fields()[3].schema(), other.result);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing WagerResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.apiserver.objects.WagerResponse other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.jackpotPoolId)) {
        this.jackpotPoolId = data().deepCopy(fields()[0].schema(), other.jackpotPoolId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wager)) {
        this.wager = data().deepCopy(fields()[1].schema(), other.wager);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.result)) {
        this.result = data().deepCopy(fields()[3].schema(), other.result);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'jackpotPoolId' field.
      * The ID of a specific Jackpot pool
      * @return The value.
      */
    public java.lang.CharSequence getJackpotPoolId() {
      return jackpotPoolId;
    }


    /**
      * Sets the value of the 'jackpotPoolId' field.
      * The ID of a specific Jackpot pool
      * @param value The value of 'jackpotPoolId'.
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder setJackpotPoolId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.jackpotPoolId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'jackpotPoolId' field has been set.
      * The ID of a specific Jackpot pool
      * @return True if the 'jackpotPoolId' field has been set, false otherwise.
      */
    public boolean hasJackpotPoolId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'jackpotPoolId' field.
      * The ID of a specific Jackpot pool
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder clearJackpotPoolId() {
      jackpotPoolId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'wager' field.
      * The wager placed to the Jackpot pool
      * @return The value.
      */
    public int getWager() {
      return wager;
    }


    /**
      * Sets the value of the 'wager' field.
      * The wager placed to the Jackpot pool
      * @param value The value of 'wager'.
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder setWager(int value) {
      validate(fields()[1], value);
      this.wager = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'wager' field has been set.
      * The wager placed to the Jackpot pool
      * @return True if the 'wager' field has been set, false otherwise.
      */
    public boolean hasWager() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'wager' field.
      * The wager placed to the Jackpot pool
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder clearWager() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * The status returned for the request, i.e. success or failure
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * The status returned for the request, i.e. success or failure
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * The status returned for the request, i.e. success or failure
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * The status returned for the request, i.e. success or failure
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'result' field.
      * The result of placing the wager, i.e. win or lose
      * @return The value.
      */
    public java.lang.CharSequence getResult() {
      return result;
    }


    /**
      * Sets the value of the 'result' field.
      * The result of placing the wager, i.e. win or lose
      * @param value The value of 'result'.
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder setResult(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.result = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * The result of placing the wager, i.e. win or lose
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'result' field.
      * The result of placing the wager, i.e. win or lose
      * @return This builder.
      */
    public com.example.apiserver.objects.WagerResponse.Builder clearResult() {
      result = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WagerResponse build() {
      try {
        WagerResponse record = new WagerResponse();
        record.jackpotPoolId = fieldSetFlags()[0] ? this.jackpotPoolId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.wager = fieldSetFlags()[1] ? this.wager : (java.lang.Integer) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.result = fieldSetFlags()[3] ? this.result : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WagerResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<WagerResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WagerResponse>
    READER$ = (org.apache.avro.io.DatumReader<WagerResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.jackpotPoolId);

    out.writeInt(this.wager);

    out.writeString(this.status);

    out.writeString(this.result);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.jackpotPoolId = in.readString(this.jackpotPoolId instanceof Utf8 ? (Utf8)this.jackpotPoolId : null);

      this.wager = in.readInt();

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.result = in.readString(this.result instanceof Utf8 ? (Utf8)this.result : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.jackpotPoolId = in.readString(this.jackpotPoolId instanceof Utf8 ? (Utf8)this.jackpotPoolId : null);
          break;

        case 1:
          this.wager = in.readInt();
          break;

        case 2:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 3:
          this.result = in.readString(this.result instanceof Utf8 ? (Utf8)this.result : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










